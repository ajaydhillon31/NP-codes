tcp e server


#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main()
{
char str[100];
int listen_fd, comm_fd;
struct sockaddr_in servaddr;
listen_fd = socket(AF_INET, SOCK_STREAM, 0);
bzero( &servaddr, sizeof(servaddr));
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
servaddr.sin_port = htons(22000);
bind(listen_fd, (struct sockaddr *) &servaddr, sizeof(servaddr));
listen(listen_fd, 10);

while(1)
{
comm_fd = accept(listen_fd, (struct sockaddr*) NULL, NULL);
bzero( str, 100);
recv(comm_fd,str,100,0);
printf("Echoing back - %s",str);
send(comm_fd,str,strlen(str),0);
close(comm_fd);

}
}


tcp e client



#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main(int argc,char **argv)
{
int sockfd,n;
char sendline[100];
char recvline[100];
struct sockaddr_in servaddr;
sockfd=socket(AF_INET,SOCK_STREAM,0);
bzero(&servaddr,sizeof servaddr);
servaddr.sin_family=AF_INET;
servaddr.sin_port=htons(22000);
servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
//inet_pton(AF_INET,"127.0.0.1",&(servaddr.sin_addr));
connect(sockfd,(struct sockaddr *)&servaddr,sizeof(servaddr));
while(1)
{
bzero( sendline, 100);
bzero( recvline, 100);
fgets(sendline,100,stdin); /*stdin = 0 , for standard input */

send(sockfd,sendline,strlen(sendline),0);

recv(sockfd,recvline,100,0);
printf("%s",recvline);
}
}


udp e server
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main()
{
char str[100];
int s_fd;
struct sockaddr_in saddr,caddr;
s_fd = socket(AF_INET, SOCK_DGRAM, 0);
bzero( &saddr, sizeof(saddr));
saddr.sin_family = AF_INET;
saddr.sin_addr.s_addr = htonl(INADDR_ANY);
saddr.sin_port = htons(43454);
bind(s_fd, (struct sockaddr *) &saddr, sizeof(saddr));

int len;
while(1)
{
bzero( str, 100);
int count=recvfrom(s_fd,str,sizeof(str),0,(struct sockaddr*)&caddr,&len);

printf("Echoing back - %s, %d",str,count);
count=sendto(s_fd,str,strlen(str),0,(struct sockaddr*)&caddr,sizeof(caddr));
printf("/n%d/n",count);

break;
}
}


udp e client
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main(int argc,char **argv)
{
int fd,n;
char sendmessage[100];
char recvmessage[100];
struct sockaddr_in saddr;
fd=socket(AF_INET,SOCK_DGRAM,0);
bzero(&saddr,sizeof saddr);
saddr.sin_family=AF_INET;
saddr.sin_port=htons(43454);
saddr.sin_addr.s_addr = inet_addr("127.0.0.1");
int len=sizeof(saddr);
while(1)
{
bzero( sendmessage, 100);
bzero( recvmessage, 100);
fgets(sendmessage,100,stdin); /*stdin = 0 , for standard input */
int count=sendto(fd,sendmessage,strlen(sendmessage),0,(struct sockaddr*)&saddr,sizeof(saddr));

printf("%d\n",count);

count= recvfrom(fd,recvmessage,sizeof(recvmessage),0,(struct sockaddr*)&saddr,&len);


printf("%s,%d",recvmessage,count);

break;
}
}


tcp c server
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main()
{
char recieved[100],sent[100];
int listen_fd, comm_fd;
struct sockaddr_in servaddr;
listen_fd = socket(AF_INET, SOCK_STREAM, 0);
bzero( &servaddr, sizeof(servaddr));
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
servaddr.sin_port = htons(27000);
bind(listen_fd, (struct sockaddr *) &servaddr, sizeof(servaddr));
listen(listen_fd, 10);

comm_fd = accept(listen_fd, (struct sockaddr*) NULL, NULL);
while(1)
{
recv(comm_fd,recieved,sizeof(recieved),0);

if(strcmp(recieved,"exit\n")==0)
{
break;
}
printf("%s",recieved);

fgets(sent,100,stdin);

send(comm_fd,sent,sizeof(sent),0);

if(strcmp(sent,"exit\n")==0)
{
break;
}

}

}


tcp c client #include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main(int argc,char **argv)
{
int sockfd,n;
char sendline[100];
char recvline[100];
struct sockaddr_in servaddr;
sockfd=socket(AF_INET,SOCK_STREAM,0);
bzero(&servaddr,sizeof servaddr);
bzero( sendline, 100);
bzero( recvline, 100);
servaddr.sin_family=AF_INET;
servaddr.sin_port=htons(27000);
servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
connect(sockfd,(struct sockaddr *)&servaddr,sizeof(servaddr));
while(1)
{
fgets(sendline,100,stdin); 

send(sockfd,sendline,sizeof(sendline),0);

if(strcmp(sendline,"exit\n")==0)
{
break;
}

recv(sockfd,recvline,sizeof(recvline),0);

if(strcmp(recvline,"exit\n")==0)
{
break;
}

printf("%s",recvline);
}
}



udp c server
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main()
{
char send[100],recv[100];
int s_fd;
struct sockaddr_in saddr,caddr;
s_fd = socket(AF_INET, SOCK_DGRAM, 0);
bzero( &saddr, sizeof(saddr));
saddr.sin_family = AF_INET;
saddr.sin_addr.s_addr = htonl(INADDR_ANY);
saddr.sin_port = htons(26005);
if (bind(s_fd, (struct sockaddr *) &saddr, sizeof(saddr))<0)
{
printf("HELLO@");
}
int len=sizeof(caddr);
while(1)
{
bzero( recv, 100);
bzero( send, 100);
recvfrom(s_fd,recv,sizeof(recv),0,(struct sockaddr*)&caddr,&len);
if(strcmp(recv,"exit\n")==0)
{
break;
}
printf("%s",recv);
fgets(send,100,stdin);

if(( sendto(s_fd,send,strlen(send),0,(struct sockaddr*)&caddr,len) == 0))
 {
 printf("HELLO");
 }
printf("NOT HELLO");

if(strcmp(send,"exit\n")==0)
{
break;
}

}
}

//sendto(fd,sendmessage,sizeof(sendmessage),0,(struct sockaddr*)&saddr,sizeof(saddr));




udp c client
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include<string.h>
int main(int argc,char **argv)
{
int fd,n;
char sendmessage[100];
char recvmessage[100];
struct sockaddr_in saddr;
fd=socket(AF_INET,SOCK_DGRAM,0);
bzero(&saddr,sizeof saddr);
saddr.sin_family=AF_INET;
saddr.sin_port=htons(26005);
saddr.sin_addr.s_addr = inet_addr("127.0.0.1");

int len;
while(1)
{
bzero( sendmessage, 100);
bzero( recvmessage, 100);
fgets(sendmessage,100,stdin); /*stdin = 0 , for standard input */
sendto(fd,sendmessage,sizeof(sendmessage),0,(struct sockaddr*)&saddr,sizeof(saddr));
if(strcmp(sendmessage,"exit\n")==0)
{
break;
}
recvfrom(fd,recvmessage,sizeof(recvmessage),0,(struct sockaddr*)&saddr,&len);
if(strcmp(recvmessage,"exit\n")==0)
{
break;
}

printf("%s",recvmessage);

}
}


//recvfrom(s_fd,recv,sizeof(recv),0,(struct sockaddr*)&caddr,&len);
